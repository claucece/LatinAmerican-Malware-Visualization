//constructor function for the music
function Music() {
    
    // mapped to the hash of the malware    
    var midiNote = 0;
    var oscIndex = 0;
    var triOscIndex = 0;
    var hash = [248, 41, 253, 160, 67, 14, 194, 123, 140, 47, 132, 13, 139, 96, 198, 198, 242, 104, 90, 12, 131];
    var midHash = [58, 252, 41, 98, 89, 23, 224, 25, 137, 119, 60, 205, 206, 30, 200, 223, 57, 21, 197, 43, 190];
    var lowHash = [19, 39, 112, 214, 249, 188, 90, 64, 94, 5, 92, 239, 23, 196, 80, 124, 167, 62, 143, 248, 252, 219,];

    notes = [];

    var midiVal, freq;

    this.osc = new p5.TriOsc();
    this.sine = new p5.Oscillator('sine')
    //this.envlo = new p5.Envelope();

    this.create = function(h) {
        for (var i = 0; i < h.length; i++) {
            midiNote = random(60, 74);
            notes[i] = midiNote;
        }
    }
    
    
	// draw the noise to the screen
	this.startNoiseHigh = function() {
      this.create(hash);
      // see also: userStartAudio();
      this.osc.start();

      midiVal = notes[oscIndex % notes.length];
      freq = midiToFreq(midiVal);
      this.osc.freq(freq);

      oscIndex++;
	};
    
    // draw the noise to the screen
	this.startNoiseMid = function() {
      this.create(midHash);
      // see also: userStartAudio();
      this.osc.start();

      midiVal = notes[oscIndex + 4 % notes.length];
      freq = midiToFreq(midiVal);
      this.osc.freq(freq);

      oscIndex++;
	};
    
    this.startNoiseLow = function() {
      this.create(lowHash);
      // see also: userStartAudio();
      this.osc.start();

      midiVal = notes[oscIndex + 8 % notes.length];
      freq = midiToFreq(midiVal);
      this.osc.freq(freq);

      oscIndex++;
	};
}