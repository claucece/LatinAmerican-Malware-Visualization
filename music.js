//constructor function for the malware music
function Music() {

  // mapped to the hash of the malware
  var midiNote = 0; // the current midiNote.
  var oscIndex = 0;
  // the different parts of the hash to be converted in music.
  var hash = [248, 41, 253, 160, 67, 14, 194, 123, 140, 47, 132, 13, 139, 96, 198, 198, 242, 104, 90, 12, 131];
  var midHash = [58, 252, 41, 98, 89, 23, 224, 25, 137, 119, 60, 205, 206, 30, 200, 223, 57, 21, 197, 43, 190];
  var lowHash = [19, 39, 112, 214, 249, 188, 90, 64, 94, 5, 92, 239, 23, 196, 80, 124, 167, 62, 143, 248, 252, 219];

  // the array of notes;
  var notes = [];

  var midiVal, freq;

  this.osc = new p5.TriOsc();

  // create created the notes based on the given hash.
  // @params: 'h', the given hash.
  this.create = function(h) {
    for (var i = 0; i < h.length; i++) {
      midiNote = random(60, 74); // choose a random note.
      notes[i] = midiNote;
    }
  }

  // draw the high noise to the screen.
  this.startNoiseHigh = function() {
    this.create(hash);
    this.osc.start();

    midiVal = notes[oscIndex % notes.length];
    freq = midiToFreq(midiVal);
    this.osc.freq(freq);

    oscIndex++;
  };

  // draw the mid noise to the screen.
  this.startNoiseMid = function() {
    this.create(midHash);
    this.osc.start();

    midiVal = notes[oscIndex + 4 % notes.length];
    freq = midiToFreq(midiVal);
    this.osc.freq(freq);

    oscIndex++;
  };

  // draw the low noise to the screen.
  this.startNoiseLow = function() {
    this.create(lowHash);
    this.osc.start();

    midiVal = notes[oscIndex + 8 % notes.length];
    freq = midiToFreq(midiVal);
    this.osc.freq(freq);

    oscIndex++;
  };

  // stop the music.
  this.stop = function() {
    this.osc.stop();
  }
}
