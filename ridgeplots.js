//constructor function to draw the ridge plot visualization.
function RidgePlot() {
	//name of the visualisation.
	this.name = "ridgeplot";
    
    this.startX = width / 5;
    this.endY = height / 5;
    this.startY = height - this.endY;
    this.spectrumWidth = (width / 5) * 3;
    
    var output = [];
    var speed = 0.7;

    // add the waves to the visualization
	this.addWave = function() {
        var w = fourier.waveform();
        var outputWave = [];
        var smallScale = 3;
        var bigScale = 200;

    for (var i=0; i < w.length; i++) {
        if (i % 20 == 0) {
            var x = map(i, 0, 1024, this.startX, this.startX + this.spectrumWidth);
            if (i < 1024 * 0.25 || i > 1024 * 0.75) {
                var y = map(w[i], -1, 1, -smallScale, smallScale);
                outputWave.push({
                    x: x,
                    y: this.startY + y,
                })
            } else {
                var y = map(w[i], -1, 1, -bigScale, bigScale);
                outputWave.push({
                    x: x,
                    y: this.startY + y,
                })
            } 
        }
    }
    output.push(outputWave); // push the wave.
    };
    
	// draw the visualization to the screen.
	this.draw = function() {
		push();
        // the stroke color is red.
		stroke(255, 0, 0);
        strokeWeight(2);
        
        // add the waves.
        if (frameCount % 30 == 0) {
            this.addWave();
        }
           
        
        for (var i = 0; i < output.length; i++) {
            var out = output[i];

            // draw the wave shape.
            beginShape();
            for (var j = 0; j < out.length; j++) {
                out[j].y -= speed;
                // fill the waves with a shade of orange.
                fill(255, 83, 13);
                vertex(out[j].x, out[j].y);
            }
            endShape();

            if (out[0].y < this.endY) {
                output.splice(i, 1);
            }
        }
		pop();
	};
}
