//global for the controls and input.
var controls = null;
//store visualisations in a container.
var vis = null;
//variable for the p5 sound object.
var sound = null;
//variable for p5 fast fourier transform
var fourier;
var noiseStep;
var prog;

function preload() {
  // By Bernd Krueger on music from Ravel, taken from: http://www.piano-midi.de/ravel.html , licensed with CC: http://www.piano-midi.de/copy.htm
  // This is the 'non-malware' music.
  sound = loadSound('assets/rav-eau-1.mp3');
}

function setup() {
  createCanvas(windowWidth, windowHeight);
  background(0);

  controls = new ControlsAndInput();

  // instantiate the fft object
  fourier = new p5.FFT();

  //create a new visualisation container and add the visualisations
  vis = new Visualisations();
  vis.add(new WavePattern()); // adds the wave pattern visualization.
  vis.add(new RidgePlot()); // adds the ridgeplot visualization.
  vis.add(new Noise()); // adds the noise visualization.
  //vis.add(new Spectrum()); // adds the spectrum visualization.
  vis.add(new Hash()); // adds the hash visualization: draws the base hash to the screen moving with the malware music.
  vis.add(new Binary()); // add the binary visualization.


  // add the different parts of the malware music.
  musicHigh = new Music();
  musicMid = new Music();
  musicLow = new Music();
}

function draw() {
  background(0);

  // draws the description of the website.
  fill("#33180B");
  rect(30, 0, windowWidth / 2.7, windowHeight / 1.5);
  var p1 = 'Malware is the hidden threat. The ultimate tool that gets installed and imperceptively damages. For years, human rights activists in Latin America have been targeted with malware.';
  fill(180, 180, 180);
  textSize(20);
  textFont('Helvetica');
  text(p1, 50, 15, windowWidth / 3.2, windowHeight / 1.5);

  var p2 = 'This project aims to be a sensory experience of how malware feels like to these activists: when they realise that malware is installed, they are confused and in fear. They feel like a random noise have taken over their device. This experience is how they feel.';
  text(p2, 50, 125, windowWidth / 3.2, windowHeight / 1.5);

  var p3 = 'There are two ways you can play with this: \n1. press the play button to hear and see the non-malware state with a calm song, \n2. press enter key to hear and see the malware state: what it feels like if the non-malware app got infected (stop this with the space bar).';
  text(p3, 50, 300, windowWidth / 3.2, windowHeight / 1.5);

  // draw the selected visualisations.
  for (var i = 0; i < vis.visuals.length; i++) {
    vis.visuals[i].draw();
  }

  // draw the controls (a play/pause button) on the bottom middle of the page.
  controls.draw();

  // callback for when the 'non-malware' music nearly ends (at 5 minutes mark).
  sound.addCue(300, function() {
    console.log("here");
    controls.playbackButton.ended = true;
    controls.playbackButton.playing = false;
  });

  // check if a key has been pressed.
  iskeyPressed();
}

// functionality that signals the controls that the mouse has been clicked.
function mouseClicked() {
  controls.mousePressed();
}

// functionality that plays/stops the music depending on the key pressed.
function iskeyPressed() {
  var textToDisplay; // the text to be displayed.

  if (keyCode == 32) {
    musicHigh.stop();
    musicMid.stop();
    musicLow.stop();

    // signal that the visualization is for the 'non-malware' state.
    for (var i = 0; i < vis.visuals.length; i++) {
      vis.visuals[i].isMalware = false;
    }

    displaySoundType(false);

  } else if (keyCode == 13) {
    musicHigh.startNoiseHigh();
    musicMid.startNoiseMid();
    musicLow.startNoiseLow();


    // signal that the visualization is for the 'malware' state.
    for (var i = 0; i < vis.visuals.length; i++) {
      vis.visuals[i].isMalware = true;
    }

    displaySoundType(true);

  }
}

// displays the sound type if it is the malware sound.
// @params 'isMalware': a boolean that detemrines if it is malware sound or not.
function displaySoundType(isMalware) {
  if (isMalware) {
    fill(51, 24, 11);
    rect(width / 1.3 - 10, height / 1.4, 220, 50);
    textToDisplay = "Malware is playing";
    fill(255, 0, 0);
    text(textToDisplay, width / 1.3, height / 1.3);
  } else {
    textToDisplay = "";
    text(textToDisplay, width / 2, height / 2);
  }
}

// when the window has been resized. Resize canvas to fit
// if the visualisation needs to be resized call its onResize method
function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
  if (vis.selectedVisual.hasOwnProperty('onResize')) {
    vis.selectedVisual.onResize();
  }
}