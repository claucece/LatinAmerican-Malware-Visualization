//global for the controls and input 
var controls = null;
//store visualisations in a container
var vis = null;
//variable for the p5 sound object
var sound = null;
//variable for p5 fast fourier transform
var fourier;

var output = [];
var startX;
var startY;
var endY;
var spectrumWidth;
var speed = 0.7;
var fourier;

function preload(){
	sound = loadSound('assets/stomper_reggae_bit.mp3');
}

function setup(){
	 createCanvas(windowWidth, windowHeight);
	 //background(0);
     
     // TODO: plot
     startX = width / 5;
     endY = height / 5;
     startY = height - endY;
     spectrumWidth = (width / 5) * 3;
	 
     controls = new ControlsAndInput();

	 //instantiate the fft object
	 fourier = new p5.FFT();

	 //create a new visualisation container and add visualisations
	 vis = new Visualisations();
	 vis.add(new Spectrum());
	 vis.add(new WavePattern());
	 vis.add(new Needles());

}

function draw(){
	background(0);
    
	//draw the selected visualisation
    vis.selectedVisual.draw();
    
	//draw the controls on top of the page.
	controls.draw();
    
    // TODO: plot
    stroke(255);
    strokeWeight(2);
    if (frameCount % 30 == 0) {
        addWave();
    }
    
    for (var i = 0; i < output.length; i++) {
        var o = output[i];
        beginShape();
        for (var j = 0; j < o.length; j++) {
            o[j].y -= speed;
            vertex(o[j].x, o[j].y);
        }
        endShape();
        if (o[0].y < endY) {
            output.splice(i, 1);
        }
    }        
}

function mouseClicked(){
	controls.mousePressed();
}

function keyPressed(){
	controls.keyPressed(keyCode);
}

function addWave() {
    var w = fourier.waveform();
    var output_wave = [];
    var smallScale = 3;
    var bigScale = 200;
    
    for (var i=0; i < w.length; i++) {
        if (i % 20 == 0) {
            var x = map(i, 0, 1024, startX, startX + spectrumWidth);
            if (i < 1024 * 0.25 || i > 1024 * 0.75) {
                var y = map(w[i], -1, 1, -smallScale, smallScale);
                output_wave.push({
                    x: x,
                    y: startY + y,
                })
            } else {
                var y = map(w[i], -1, 1, -bigScale, bigScale);
                output_wave.push({
                    x: x,
                    y: startY + y,
                })
            } 
        }
    }
    output.push(output_wave);
}

// when the window has been resized. Resize canvas to fit 
// if the visualisation needs to be resized call its onResize method
function windowResized(){
	resizeCanvas(windowWidth, windowHeight);
	if(vis.selectedVisual.hasOwnProperty('onResize')){
		vis.selectedVisual.onResize();
	}
}
